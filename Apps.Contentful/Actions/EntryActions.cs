using Apps.Contentful.Api;
using Apps.Contentful.Extensions;
using Apps.Contentful.HtmlHelpers;
using Apps.Contentful.Models;
using Apps.Contentful.Models.Entities;
using Apps.Contentful.Models.Exceptions;
using Apps.Contentful.Models.Identifiers;
using Apps.Contentful.Models.Requests;
using Apps.Contentful.Models.Requests.Tags;
using Apps.Contentful.Models.Responses;
using Apps.Contentful.Utils;
using Blackbird.Applications.Sdk.Common;
using Blackbird.Applications.Sdk.Common.Actions;
using Blackbird.Applications.Sdk.Common.Authentication;
using Blackbird.Applications.Sdk.Common.Exceptions;
using Blackbird.Applications.Sdk.Common.Invocation;
using Blackbird.Applications.Sdk.Utils.Extensions.Files;
using Blackbird.Applications.Sdk.Utils.Extensions.Sdk;
using Blackbird.Applications.SDK.Blueprints;
using Blackbird.Applications.SDK.Extensions.FileManagement.Interfaces;
using Blackbird.Filters.Constants;
using Blackbird.Filters.Extensions;
using Blackbird.Filters.Transformations;
using Blackbird.Filters.Xliff.Xliff1;
using Blackbird.Filters.Xliff.Xliff2;
using Contentful.Core.Models;
using HtmlAgilityPack;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Specialized;
using System.Net.Mime;
using System.Text;
using System.Web;

namespace Apps.Contentful.Actions;

[ActionList("Entries")]
public class EntryActions(InvocationContext invocationContext, IFileManagementClient fileManagementClient)
    : BaseInvocable(invocationContext)
{
    private IEnumerable<AuthenticationCredentialsProvider> Creds =>
        InvocationContext.AuthenticationCredentialsProviders;
          

    [Action("Get IDs from entry content", Description = "Extract entry and field IDs from the Blackbird generated content file.")]
    public async Task<GetIdsFromHtmlResponse> GetIdsFromHtmlFile([ActionParameter] GetIdsFromFileRequest input)
    {
        var file = await fileManagementClient.DownloadAsync(input.File);
        var html = Encoding.UTF8.GetString(await file.GetByteData());
        var (entryId, fieldId, locale) = ExtractIdsFromHtml(html);

        if (string.IsNullOrEmpty(entryId))
        {
            throw new PluginApplicationException("Couldn't find the 'blackbird-entry-id' value in the HTML file. " +
                                                 "Please make sure the file is not empty and was generated by our 'Contentful' app. " +
                                                 "Otherwise, please contact the support team.");
        }

        var linkedIds = GetLinkedEntryIdsFromFile(html);
        return new GetIdsFromHtmlResponse
        {
            EntryId = entryId,
            FieldId = fieldId ?? string.Empty,
            Locale = locale ?? string.Empty,
            LinkedEntryIds = linkedIds.EntryIds,
            LinkedAssetIds = linkedIds.AssetIds
        };
    }

    [BlueprintActionDefinition(BlueprintAction.SearchContent)]
    [Action("Search entries", Description = "Search for all entries. Optionally filter by content model and tags.")]
    public async Task<ListEntriesResponse> ListEntries([ActionParameter] ListEntriesRequest request)
    {
        var client = new ContentfulClient(Creds, request.Environment);

        ValidateDates(request.PublishedAfter, request.PublishedBefore, "Published");
        ValidateDates(request.FirstPublishedAfter, request.FirstPublishedBefore, "First published");

        var queryString = HttpUtility.ParseQueryString(string.Empty);
        ApplyListEntriesRequestFilters(queryString, request);

        IEnumerable<Entry<object>> entries =
            await client.Paginate<Entry<object>>(
                async (query) => await client.GetEntriesCollection<Entry<object>>(query), "?" + queryString);
        
        if (request.Published.HasValue && request.Published.Value)
        {            
            entries = entries.Where(e => e.SystemProperties.PublishedVersion != null && 
                                         e.SystemProperties.Version == e.SystemProperties.PublishedVersion + 1);
        }
        
        if (request.Changed.HasValue && request.Changed.Value)
        {
            entries = entries.Where(e => e.SystemProperties.PublishedVersion != null && 
                                         e.SystemProperties.Version >= e.SystemProperties.PublishedVersion + 2);
        }        
        
        if (request.Draft.HasValue && request.Draft.Value)
        {
            entries = entries.Where(e => e.SystemProperties.PublishedVersion.HasValue == false);
        }

        if (request.Tags is not null && request.Tags.Any())
        {
            entries = entries.Where(e => e.Metadata.Tags.Any(t => request.Tags.Contains(t.Sys.Id)));
        }

        if (request.ExcludeTags is not null && request.ExcludeTags.Any())
        {
            entries = entries.Where(e => e.Metadata.Tags.All(t => !request.ExcludeTags.Contains(t.Sys.Id)));
        }

        var entriesResponse = entries.Select(e => new EntryEntity(e)).ToArray();
        return new ListEntriesResponse(entriesResponse, entriesResponse.Length);
    }

    [Action("Get entry", Description = "Get details of a specific entry")]
    public async Task<EntryWithTitleEntity> GetEntry([ActionParameter] EntryIdentifier input, 
        [ActionParameter] LocaleOptionalIdentifier localeOptionalIdentifier)
    {
        if (string.IsNullOrEmpty(input.EntryId))
        {
            throw new PluginMisconfigurationException("Entry ID is null or empty. Please add a valid entry ID");
        }
        
        var client = new ContentfulClient(Creds, input.Environment);
        var entry = await client.ExecuteWithErrorHandling(async () => await client.GetEntry(input.EntryId));
        var contentTypeId = entry.SystemProperties.ContentType.SystemProperties.Id;
        var contentType =
            await client.ExecuteWithErrorHandling(async () => await client.GetContentType(contentTypeId));
        entry.SystemProperties.ContentType = contentType;

        var availableLocales = (await client.GetLocalesCollection()).Select(l => l.Code).ToArray();
        var contentModel = await client.ExecuteWithErrorHandling(async () =>
            await client.GetContentType(entry.SystemProperties.ContentType.SystemProperties.Id));
        var contentModelLocalizableFields = contentModel.Fields.Where(f => f.Localized);
        var entryFields = (JObject)entry.Fields;
        var missingLocales = new HashSet<string>();

        foreach (var field in contentModelLocalizableFields)
        {
            if (!entryFields.TryGetValue(field.Id, out var entryField))
                continue;

            foreach (var locale in availableLocales)
            {
                if (!((JObject)entryField).TryGetValue(locale, out _))
                    missingLocales.Add(locale);
            }
        }

        return new(entry, localeOptionalIdentifier.Locale, missingLocales.ToList());
    }

    [Action("Find entry by field value", Description = "Search for first matching entry.")]
    public async Task<EntryEntity> FindEntry([ActionParameter] FindEntryRequest input)
    {
        var client = new ContentfulClient(Creds, input.Environment);

        var queryString = HttpUtility.ParseQueryString(string.Empty);

        queryString.Add("content_type", input.ContentModelId);

        queryString.Add($"fields.{input.FieldID}", input.Value);

        
        IEnumerable<Entry<object>> entries =
            await client.Paginate<Entry<object>>(
                async (query) => await client.GetEntriesCollection<Entry<object>>(query), "?" + queryString);

        var entriesResponse = entries.Select(e => new EntryEntity(e)).ToArray();

        return entriesResponse.FirstOrDefault();
    }

    [Action("Add new entry", Description = "Add new entry with specified content model.")]
    public async Task<EntryIdentifier> AddNewEntry([ActionParameter] ContentModelIdentifier contentModelIdentifier)
    {
        var client = new ContentfulClient(Creds, contentModelIdentifier.Environment);
        var result = await client.ExecuteWithErrorHandling(async () =>
            await client.CreateEntry(new Entry<dynamic>(), contentModelIdentifier.ContentModelId));
        return new EntryIdentifier
        {
            EntryId = result.SystemProperties.Id
        };
    }

    [Action("Delete entry", Description = "Delete specified entry.")]
    public async Task DeleteEntry([ActionParameter] EntryIdentifier entryIdentifier)
    {
        ContentfulClientExtensions.ThrowIfNullOrEmpty(entryIdentifier.EntryId, nameof(entryIdentifier.EntryId));
        
        var client = new ContentfulClient(Creds, entryIdentifier.Environment);
        var entry = await client.ExecuteWithErrorHandling(async () =>
            await client.GetEntry(entryIdentifier.EntryId));
        await client.ExecuteWithErrorHandling(async () =>
            await client.DeleteEntry(entryIdentifier.EntryId, version: (int)entry.SystemProperties.Version));
    }

    [Action("Publish entry", Description = "Publish specified entry.")]
    public async Task PublishEntry([ActionParameter] EntryIdentifier entryIdentifier)
    {
        ContentfulClientExtensions.ThrowIfNullOrEmpty(entryIdentifier.EntryId, nameof(entryIdentifier.EntryId));

        var client = new ContentfulClient(Creds, entryIdentifier.Environment);
        var entry = await client.ExecuteWithErrorHandling(async () =>
            await client.GetEntry(entryIdentifier.EntryId));
        await client.ExecuteWithErrorHandling(async () =>
            await client.PublishEntry(entryIdentifier.EntryId, version: (int)entry.SystemProperties.Version));
    }

    [Action("Unpublish entry", Description = "Unpublish specified entry.")]
    public async Task UnpublishEntry([ActionParameter] EntryIdentifier entryIdentifier)
    {
        ContentfulClientExtensions.ThrowIfNullOrEmpty(entryIdentifier.EntryId, nameof(entryIdentifier.EntryId));

        var client = new ContentfulClient(Creds, entryIdentifier.Environment);
        var entry = await client.ExecuteWithErrorHandling(async () =>
            await client.GetEntry(entryIdentifier.EntryId));
        await client.ExecuteWithErrorHandling(async () =>
            await client.UnpublishEntry(entryIdentifier.EntryId, version: (int)entry.SystemProperties.Version));
    }

    [BlueprintActionDefinition(BlueprintAction.DownloadContent)]
    [Action("Download entry", Description ="Get all localizable fields of specified entry, and all chil entries as a complete translatable file.")]
    public async Task<DownloadContentOutput> GetEntryLocalizableFieldsAsHtmlFile(
        [ActionParameter] DownloadContentInput entryIdentifier,
        [ActionParameter] GetEntryAsHtmlRequest input)
    {
        if (string.IsNullOrEmpty(entryIdentifier.ContentId))
        {
            throw new PluginMisconfigurationException("Entry ID is null or empty. Please add a valid entry ID");
        }
        if (entryIdentifier.ContentId.Contains("?")) 
        {
            entryIdentifier.ContentId = entryIdentifier.ContentId.Remove(entryIdentifier.ContentId.IndexOf('?'));
        }

        var client = new ContentfulClient(Creds, entryIdentifier.Environment);
        var spaceId = Creds.Get("spaceId").Value;

        var locales = await client.ExecuteWithErrorHandling(async () => await client.GetLocalesCollection());
        var defaultLocale = locales.FirstOrDefault(x => x.Default)?.Code;
        var otherLocales = locales.Where(x => !x.Default).Select(x => x.Code).ToList();
        var selectedLocale = entryIdentifier.Locale ?? defaultLocale ?? otherLocales.FirstOrDefault();
        if (selectedLocale == null) throw new PluginMisconfigurationException("Your contentful instance has no default locale defined. Set a default locale or select the locale in the advanced setting.");

        if (locales.All(x => x.Code != selectedLocale))
        {
            var allLocales = string.Join(", ", locales.Select(x => x.Code));
            throw new PluginMisconfigurationException($"Locale {selectedLocale} not found. Available locales: {allLocales}");
        }

        var entriesContent = await client.ExecuteWithErrorHandling(async () => await GetLinkedEntriesContent(
            entryIdentifier.ContentId,
            selectedLocale,
            client,
            new(),
            input.GetReferenceContent ?? false,
            input.GetNonLocalizationReferenceContent ?? false,
            input.GetHyperlinkContent ?? false,
            input.GetEmbeddedInlineContent ?? false,
            input.GetEmbeddedBlockContent ?? false,
            input.IgnoredFieldIds ?? new List<string>(),
            input.IgnoredContentTypeIds?.ToList() ?? new List<string>(),
            input.ExcludeTags?.ToList(),
            entryIdentifier.ContentId,
            input.MaxDepth));

        var htmlConverter = new EntryToHtmlConverter(InvocationContext, entryIdentifier.Environment);

        var originalEntry = await client.ExecuteWithErrorHandling(async () => await GetEntry(new() { EntryId = entryIdentifier.ContentId, Environment = entryIdentifier.Environment },
            new LocaleOptionalIdentifier { Locale = selectedLocale }));

        var updatedByUser = await client.ExecuteWithErrorHandling(async () => await client.GetUser(originalEntry.UpdatedBy));

        var resultHtml = htmlConverter.ToHtml(entriesContent, selectedLocale, spaceId, originalEntry.Title, client.GetEntryEditorUrl(originalEntry.ContentId), updatedByUser);
        
        var fileNameFirstPart = string.IsNullOrEmpty(originalEntry.Title) ? entryIdentifier.ContentId : originalEntry.Title;
        var file = await fileManagementClient.UploadAsync(new MemoryStream(Encoding.UTF8.GetBytes(resultHtml)),
            MediaTypeNames.Text.Html, $"{fileNameFirstPart}_{selectedLocale}.html");

        return new()
        {
            Content = file
        };
    }

    [BlueprintActionDefinition(BlueprintAction.UploadContent)]
    [Action("Upload entry", Description = "Update all localizable fields of specified entry, and its child entries, from a translated file.")]
    public async Task<DownloadContentOutput> SetEntryLocalizableFieldsFromHtmlFile(
        [ActionParameter] UploadEntryRequest input)
    {
        if (!input.Content.Name.EndsWith(".html") && !input.Content.Name.EndsWith(".xliff") && !input.Content.Name.EndsWith(".xlf"))
        {
            throw new PluginMisconfigurationException("Only .html, .xliff and .xlf files are supported. Please specify a different file");
        }

        var client = new ContentfulClient(Creds, input.Environment);
        var output = new DownloadContentOutput();

        var locales = await client.ExecuteWithErrorHandling(async () => await client.GetLocalesCollection());
        if (locales.All(x => x.Code != input.Locale))
        {
            var allLocales = string.Join(", ", locales.Select(x => x.Code));
            throw new PluginMisconfigurationException(
                $"Locale {input.Locale} not found. Please specify a valid locale. " +
                $"Available locales: {allLocales}");
        }

        var file = await fileManagementClient.DownloadAsync(input.Content);
        var content = Encoding.UTF8.GetString(await file.GetByteData());

        Transformation? transformation = null;
        if (Xliff2Serializer.IsXliff2(content) || Xliff1Serializer.IsXliff1(content))
        {
            transformation = Transformation.Parse(content, input.Content.Name);
            content = transformation.Target().Serialize();
            if (content == null) throw new PluginMisconfigurationException("XLIFF did not contain any files");
        }

        var mainEntryInfo = EntryToJsonConverter.GetMainEntryInfo(content);
        var entriesToUpdate = EntryToJsonConverter.GetEntriesInfo(content);

        foreach (var entryToUpdate in entriesToUpdate)
        {
            var entry = await client.ExecuteWithErrorHandling(() => client.GetEntry(entryToUpdate.EntryId));
            var contentType = await client.ExecuteWithErrorHandling(() => 
                client.GetContentType(entry.SystemProperties.ContentType.SystemProperties.Id));

            try
            {
                var oldEntryFields = (entry.Fields as JToken)!.DeepClone();
                EntryToJsonConverter.ToJson(entry, entryToUpdate.HtmlNode, input.Locale, contentType, input.DontUpdateReferenceFields ?? false);

                if (JToken.DeepEquals(oldEntryFields.Escape(), (entry.Fields as JObject)!.Escape()))
                {
                    continue;
                }
                
                var partialObject = PartialObjectBuilder.Build(entry, input.Locale);
                await client.ExecuteWithErrorHandling(async () => await client.UpdateEntryForLocale(
                    entry: partialObject,             
                    id: entryToUpdate.EntryId,
                    locale: input.Locale
                ));
            }
            catch (FieldConversionException ex)
            {
                throw new PluginMisconfigurationException(
                    $"Error updating entry '{entry.SystemProperties.Id}': {ex.Message}");
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("archived"))
                {
                    continue;
                }

                if (ex.Message.Contains("Version mismatch error") 
                    || ex.Message.Contains("The resource could not be found")
                    || ex.Message.Contains("Internal server") 
                    || ex.Message.Contains("Validation error"))
                {
                    throw new PluginApplicationException($"Converting entry to JSON failed. " +
                                                         $"Entry ID: {entry.SystemProperties.Id}; " +
                                                         $"Error: {ex.Message}");
                }

                throw new(
                    $"Converting entry to JSON failed. Entry ID: {entry.SystemProperties.Id};  Exception: {ex}; Locale: {input.Locale}; Entry: {JsonConvert.SerializeObject(entry)}; HTML: {entryToUpdate.HtmlNode.OuterHtml};");
            }
        }

        await UpdateImageAlts(content, input, client);

        if (transformation is not null)
        {
            var originalEntry = await GetEntry(new()
            {
                EntryId = input.ContentId ?? mainEntryInfo?.EntryId,
                Environment = input.Environment
            }, new LocaleOptionalIdentifier { Locale = input.Locale });

            var entryId = input.ContentId ?? mainEntryInfo?.EntryId;
            transformation.TargetSystemReference.ContentId = originalEntry.ContentId;
            transformation.TargetSystemReference.ContentName = originalEntry.Title;
            transformation.TargetSystemReference.AdminUrl = client.GetEntryEditorUrl(originalEntry.ContentId);
            transformation.TargetSystemReference.SystemName = "Contentful";
            transformation.TargetSystemReference.SystemRef = "https://www.contentful.com/";
            transformation.TargetLanguage = input.Locale;

            output.Content = await fileManagementClient.UploadAsync(transformation.Serialize().ToStream(), MediaTypes.Xliff, transformation.XliffFileName);
        } else
        {
            output.Content = input.Content;
        }

        return output;
    }

    [Action("Search referenced entries", Description = "Get referenced entries from specified reference fields of an entry.")]
    public async Task<GetReferenceEntriesResponse> GetReferenceEntries([ActionParameter] GetReferenceEntriesRequest input)
    {
        ContentfulClientExtensions.ThrowIfNullOrEmpty(input.EntryId, nameof(input.EntryId));
        
        var client = new ContentfulClient(Creds, input.Environment);
        var entry = await client.ExecuteWithErrorHandling(async () => await client.GetEntry(input.EntryId));
        
        var contentTypeId = entry.SystemProperties.ContentType.SystemProperties.Id;
        var contentType = await client.ExecuteWithErrorHandling(async () => await client.GetContentType(contentTypeId));
        
        var entryFields = (JObject)entry.Fields;
        var referencedEntryIds = new List<string>();
        
        var referenceFields = contentType.Fields.Where(f => f.LinkType == "Entry" || 
                                                           (f.Type == "Array" && f.Items?.LinkType == "Entry"));
        if (input.FieldIds != null && input.FieldIds.Any())
        {
            referenceFields = referenceFields.Where(f => input.FieldIds.Contains(f.Id));
        }
        
        foreach (var field in referenceFields)
        {
            if (!entryFields.TryGetValue(field.Id, out var fieldValue))
                continue;
                
            if (field.LinkType == "Entry")
            {
                foreach (var localeValue in fieldValue.Children<JProperty>())
                {
                    var refId = localeValue.Value?["sys"]?["id"]?.ToString();
                    if (!string.IsNullOrEmpty(refId))
                    {
                        referencedEntryIds.Add(refId);
                    }
                }
            }
            else if (field.Type == "Array" && field.Items?.LinkType == "Entry")
            {
                foreach (var localeValue in fieldValue.Children<JProperty>())
                {
                    if (localeValue.Value is JArray array)
                    {
                        foreach (var item in array)
                        {
                            var refId = item?["sys"]?["id"]?.ToString();
                            if (!string.IsNullOrEmpty(refId))
                            {
                                referencedEntryIds.Add(refId);
                            }
                        }
                    }
                }
            }
        }
        
        var referencedEntries = new List<EntryEntity>();
        foreach (var entryId in referencedEntryIds.Distinct())
        {
            try
            {
                var referencedEntry = await client.ExecuteWithErrorHandling(async () => await client.GetEntry(entryId));
                referencedEntries.Add(new EntryEntity(referencedEntry));
            }
            catch
            {
                continue;
            }
        }
        
        return new GetReferenceEntriesResponse
        {
            ReferencedEntries = referencedEntries,
            ReferencedEntryIds = referencedEntryIds.Distinct().ToList()
        };
    }

    [Action("Search links to entry", Description = "Get entries that link to the specified entry.")]
    public async Task<GetEntriesLinkingToEntryResponse> GetEntriesLinkingToEntry(
        [ActionParameter] EntryIdentifier entry,
        [ActionParameter] OptionalMultipleContentTypeIdentifier contentModels)
    {
        ContentfulClientExtensions.ThrowIfNullOrEmpty(entry.EntryId, nameof(entry.EntryId));

        var client = new ContentfulClient(Creds, entry.Environment);

        var queryString = HttpUtility.ParseQueryString(string.Empty);
        queryString.Add("links_to_entry", entry.EntryId);

        IEnumerable<Entry<object>> entries =
            await client.Paginate<Entry<object>>(
                async (query) => await client.GetEntriesCollection<Entry<object>>(query), "?" + queryString);
        
        var entriesResponse = entries.Select(e => new EntryEntity(e)).ToList();

        if (contentModels.ContentModels?.Any() == true)
        {
            var models = contentModels.ContentModels.ToHashSet();
            entriesResponse = entriesResponse
                .Where(e => models.Contains(e.ContentTypeId))
                .ToList();
        }

        return new GetEntriesLinkingToEntryResponse
        {
            Entries = entriesResponse,
            EntriesIds = entriesResponse.Select(e => e.ContentId),
            FirstEntryId = entriesResponse.FirstOrDefault()?.ContentId ?? string.Empty,
            TotalCount = entriesResponse.Count,
        };
    }

    #region Utils

    private async Task<List<EntryContentDto>> GetLinkedEntriesContent(string entryId, string locale,
        ContentfulClient client,
        List<EntryContentDto> resultList, bool getReferenceContent, bool ignoreReferenceLocalization, bool hyperlinks,
        bool inline, bool blocks, IEnumerable<string> ignoredFieldIds, List<string> ignoredContentTypeIds,
        List<string>? excludeTags, string rootEntryId, int? maxDepth = null, int currentDepth = 0)
    {
        if (maxDepth.HasValue && currentDepth >= maxDepth.Value)
            return resultList;

        if (resultList.Any(x => x.Id == entryId))
            return resultList;

        var entryContent = await client.ExecuteWithErrorHandling(() =>
            GetEntryContent(entryId, client, ignoredFieldIds, ignoredContentTypeIds, excludeTags, rootEntryId, 
                ignoreReferenceLocalization));

        if (entryContent != null)
        {
            var linkedIds = GetLinkedEntryIds(entryContent, locale, getReferenceContent, hyperlinks, inline, blocks).Distinct()
                .ToList();

            resultList.Add(entryContent);
            foreach (var linkedEntryId in linkedIds)
                await GetLinkedEntriesContent(linkedEntryId, locale, client, resultList, getReferenceContent,
                    ignoreReferenceLocalization, hyperlinks, inline, blocks, ignoredFieldIds, ignoredContentTypeIds,
                    excludeTags, rootEntryId, maxDepth, currentDepth + 1);

            return resultList;
        }

        return resultList;
    }

    private LinkedIdsEntity GetLinkedEntryIdsFromFile(string html)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(html);

        var entryIds = new List<string>();
        var assetIds = new List<string>();

        var entryIdNodes = doc.DocumentNode.SelectNodes("//div[@data-contentful-link-id]");
        if (entryIdNodes != null)
        {
            foreach (var node in entryIdNodes)
            {
                var id = node.GetAttributeValue("data-contentful-link-id", string.Empty);
                var type = node.GetAttributeValue("data-contentful-link-type", string.Empty);

                if (type == "Asset")
                {
                    assetIds.Add(id);
                }
                else if (!string.IsNullOrEmpty(id))
                {
                    entryIds.Add(id);
                }
            }
        }

        var linkIdNodes = doc.DocumentNode.SelectNodes("//div[@data-contentful-link-ids]");
        if (linkIdNodes != null)
        {
            foreach (var node in linkIdNodes)
            {
                var ids = node.GetAttributeValue("data-contentful-link-ids", string.Empty);
                if (!string.IsNullOrEmpty(ids))
                {
                    foreach (var id in ids.Split(','))
                    {
                        if (assetIds.Contains(id.Trim()))
                            continue;

                        entryIds.Add(id.Trim());
                    }
                }
            }
        }

        // Handle embedded-entry-inline links
        var inlineLinkNodes = doc.DocumentNode.SelectNodes("//a[starts-with(@id, 'embedded-entry-inline_')]");
        if (inlineLinkNodes != null)
        {
            const string prefix = "embedded-entry-inline_";
            foreach (var node in inlineLinkNodes)
            {
                var idAttr = node.GetAttributeValue("id", string.Empty);
                if (!string.IsNullOrEmpty(idAttr) && idAttr.StartsWith(prefix))
                {
                    var extractedId = idAttr.Substring(prefix.Length);
                    if (!string.IsNullOrEmpty(extractedId))
                    {
                        entryIds.Add(extractedId);
                    }
                }
            }
        }

        // Handle entry-hyperlink elements
        var hyperlinkNodes = doc.DocumentNode.SelectNodes("//a[starts-with(@id, 'entry-hyperlink_')]");
        if (hyperlinkNodes != null)
        {
            const string prefix = "entry-hyperlink_";
            foreach (var node in hyperlinkNodes)
            {
                var idAttr = node.GetAttributeValue("id", string.Empty);
                if (!string.IsNullOrEmpty(idAttr) && idAttr.StartsWith(prefix))
                {
                    var extractedId = idAttr.Substring(prefix.Length);
                    if (!string.IsNullOrEmpty(extractedId))
                    {
                        entryIds.Add(extractedId);
                    }
                }
            }
        }

        // Handle embedded-entry-block elements
        var blockLinkNodes = doc.DocumentNode.SelectNodes("//a[starts-with(@id, 'embedded-entry-block_')]");
        if (blockLinkNodes != null)
        {
            const string prefix = "embedded-entry-block_";
            foreach (var node in blockLinkNodes)
            {
                var idAttr = node.GetAttributeValue("id", string.Empty);
                if (!string.IsNullOrEmpty(idAttr) && idAttr.StartsWith(prefix))
                {
                    var extractedId = idAttr.Substring(prefix.Length);
                    if (!string.IsNullOrEmpty(extractedId))
                    {
                        entryIds.Add(extractedId);
                    }
                }
            }
        }

        return new LinkedIdsEntity(entryIds.Distinct().ToList(), assetIds.Distinct().ToList());
    }

    private IEnumerable<string> GetLinkedEntryIds(EntryContentDto entryContent, string locale, bool getReferenceContent,
        bool hyperlinks, bool inline, bool blocks)
    {
        try
        {
            var result = new List<string>();
            var contentTypeFields = entryContent.ContentTypeFields;

            if (getReferenceContent)
            {
                var linkFieldIds = contentTypeFields
                    .Where(f => f.LinkType is "Entry")
                    .Select(f => 
                    {
                        var fieldToken = entryContent.EntryFields[f.Id];
                        if (fieldToken == null) 
                            return null;

                        var localeToken = fieldToken[locale];
                        if (localeToken == null || localeToken.Type != JTokenType.Object)
                            return null;

                        var sys = localeToken["sys"];
                        if (sys == null) 
                            return null;

                        return sys["id"]?.ToString();
                    })
                    .Where(x => !string.IsNullOrEmpty(x))
                    .ToList();

                var linkArrayFieldIds = contentTypeFields
                    .Where(x => x.Items?.LinkType == "Entry")
                    .SelectMany(x =>
                        entryContent.EntryFields[x.Id]?[locale]?.Select(x => x["sys"]?["id"]?.ToString()!) ??
                        Enumerable.Empty<string>())
                    .Where(x => !string.IsNullOrEmpty(x))
                    .ToList();

                result = result.Concat(linkFieldIds).Concat(linkArrayFieldIds).ToList();
            }

            if (hyperlinks)
            {
                var richTextFieldEntryHyperlinkIds = contentTypeFields
                    .Where(x => x.Type is "RichText")
                    .SelectMany(x => (entryContent.EntryFields[x.Id]?[locale] as JObject)?.Descendants().Where(y =>
                                         y is JProperty { Name: "nodeType" } jProperty &&
                                         jProperty.Value.ToString() == "entry-hyperlink") ??
                                     Enumerable.Empty<JToken>()).Where(x =>
                        x.Parent?["data"]?["target"]?["sys"]?["linkType"]?.Value<string>() == "Entry")
                    .Select(x => x.Parent?["data"]?["target"]?["sys"]?["id"]?.Value<string>()).ToList();

                result = result.Concat(richTextFieldEntryHyperlinkIds).ToList();
            }

            if (inline)
            {
                var richTextFieldInlineEntryIds = contentTypeFields
                    .Where(x => x.Type is "RichText")
                    .SelectMany(x => (entryContent.EntryFields[x.Id]?[locale] as JObject)?.Descendants().Where(y =>
                                         y is JProperty { Name: "nodeType" } jProperty &&
                                         jProperty.Value.ToString() == "embedded-entry-inline") ??
                                     Enumerable.Empty<JToken>()).Where(x =>
                        x.Parent?["data"]?["target"]?["sys"]?["linkType"]?.Value<string>() == "Entry")
                    .Select(x => x.Parent?["data"]?["target"]?["sys"]?["id"]?.Value<string>()).ToList();

                result = result.Concat(richTextFieldInlineEntryIds).ToList();
            }

            if (blocks)
            {
                var richTextFieldBlockEntryIds = contentTypeFields
                    .Where(x => x.Type is "RichText")
                    .SelectMany(x => (entryContent.EntryFields[x.Id]?[locale] as JObject)?.Descendants().Where(y =>
                                         y is JProperty { Name: "nodeType" } jProperty &&
                                         jProperty.Value.ToString() == "embedded-entry-block") ??
                                     Enumerable.Empty<JToken>()).Where(x =>
                        x.Parent?["data"]?["target"]?["sys"]?["linkType"]?.Value<string>() == "Entry")
                    .Select(x => x.Parent?["data"]?["target"]?["sys"]?["id"]?.Value<string>()).ToList();

                result = result.Concat(richTextFieldBlockEntryIds).ToList();
            }

            return result.ToArray();
        }
        catch (Exception ex)
        {
            throw new Exception(
                $"Error parsing Contentful model for locale {locale} | {JsonConvert.SerializeObject(entryContent)}");
        }
    }

    private async Task<EntryContentDto?> GetEntryContent(string entryId,
        ContentfulClient client,
        IEnumerable<string> ignoredFieldIds,
        IEnumerable<string> ignoredContentTypeIds,
        IEnumerable<string>? excludeTags,
        string rootEntryId,
        bool ignoreLocalizationForLinks = false,
        bool ignoreLocalizationFields = false)
    {
        var entry = await client.GetEntryWithErrorHandling(entryId);
        if (entry == null) return null;

        var user = await client.GetUser(entry.SystemProperties.UpdatedBy.SystemProperties.Id);

        if (rootEntryId != entry.SystemProperties.Id &&
            ignoredContentTypeIds.Contains(entry.SystemProperties.ContentType.SystemProperties.Id))
        {
            return null;
        }

        if (excludeTags is not null && excludeTags.Any(excludedTag => 
                entry.Metadata.Tags.Any(entryTag => entryTag.Sys.Id == excludedTag)))
        {
            if (rootEntryId == entryId)
            {
                var excludedTags = string.Join(',', excludeTags);
                throw new PluginMisconfigurationException($"The root entry ({rootEntryId}) has one or more tags that are included in the excluded tags you provided: {excludedTags}. " + 
                                                          $"Most likely, you don't want to translate this entry. If you do, please modify either the excluded tags or the entry tags.");
            }
            
            return null;
        }

        var contentTypeId = entry.SystemProperties.ContentType.SystemProperties.Id;
        var contentType = await client.ExecuteWithErrorHandling(async () =>await client.GetContentType(contentTypeId));

        if (ignoreLocalizationForLinks)
        {
            return new(entryId, entry.Fields,
                contentType.Fields
                    .Where(x => x.Localized || x.Type == "Link" || (x.Type == "Array" && x.Items?.Type == "Link"))
                    .Where(x => !ignoredFieldIds.Contains(x.Id)).ToArray(), user);
        }

        if (!ignoreLocalizationFields)
        {
            return new(entryId, entry.Fields,
                contentType.Fields.Where(x => x.Localized).Where(x => !ignoredFieldIds.Contains(x.Id)).ToArray(), user);
        }        

        return new(entryId, entry.Fields, contentType.Fields.Where(x => !ignoredFieldIds.Contains(x.Id)).ToArray(), user);
    }

    private (string? entryId, string? fieldId, string? locale) ExtractIdsFromHtml(string html)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(html);

        var entryId = doc.DocumentNode.SelectSingleNode("//meta[@name='blackbird-entry-id']")
            ?.GetAttributeValue("content", null);
        var fieldId = doc.DocumentNode.SelectSingleNode("//meta[@name='blackbird-field-id']")
            ?.GetAttributeValue("content", null);
        var locale = doc.DocumentNode.SelectSingleNode("//meta[@name='blackbird-locale']")
            ?.GetAttributeValue("content", null);

        return (entryId, fieldId, locale);
    }

    private static async Task UpdateImageAlts(string content, UploadEntryRequest input, ContentfulClient client)
    {
        var images = await EntryAssetHelper.GetImagesToUpdate(content, client);
        if (!images.Any())
            return;

        foreach (var image in images)
        {
            var updated = EntryAssetHelper.UpdateImageTitle(image.Asset, image.AltText, input.Locale);
            if (!updated) continue;

            await client.ExecuteWithErrorHandling(() => client.CreateOrUpdateAsset(image.Asset, version: image.Asset.SystemProperties.Version));
        }
    }

    private static void ApplyListEntriesRequestFilters(NameValueCollection queryString, ListEntriesRequest request)
    {
        if (request.ContentModelId != null)
        {
            queryString.Add("content_type", request.ContentModelId);
        }

        if (request.UpdatedFrom.HasValue)
        {
            queryString.Add("sys.updatedAt[gte]", request.UpdatedFrom.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (request.UpdatedTo.HasValue)
        {
            queryString.Add("sys.updatedAt[lte]", request.UpdatedTo.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (request.PublishedBefore.HasValue)
        {
            queryString.Add("sys.publishedAt[lt]", request.PublishedBefore.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (request.PublishedAfter.HasValue)
        {
            queryString.Add("sys.publishedAt[gt]", request.PublishedAfter.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (request.FirstPublishedBefore.HasValue)
        {
            queryString.Add("sys.firstPublishedAt[lt]", request.FirstPublishedBefore.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (request.FirstPublishedAfter.HasValue)
        {
            queryString.Add("sys.firstPublishedAt[gt]", request.FirstPublishedAfter.Value.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
        }

        if (!string.IsNullOrWhiteSpace(request.SearchTerm))
        {
            queryString.Add("query", request.SearchTerm);
        }
    }

    private static void ValidateDates(DateTime? after, DateTime? before, string name)
    {
        if (after.HasValue && before.HasValue && after > before)
        {
            throw new PluginMisconfigurationException(
                $"{name} after date cannot be later than {name} before date. Please specify a different value."
            );
        }
    }

    #endregion
}